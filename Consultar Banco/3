
1 - Selecionar a quantidade total de estudantes cadastrados no banco.
2 - Selecionar todos os estudantes com os respectivos cursos que eles estão cadastrados;
3 - Selecionar quais pessoas facilitadoras atuam em mais de uma turma.
4 - Selecionar os funcionários em seus respectivos departamentos.
5 - Selecionar os cursos e seus respectivos módulos.
6 - Selecionar selecionar o curso com maior duração e valor.


-- Inserção de dados

INSERT INTO alunos (nome, email, telefone, data_nascimento) VALUES
  ('João da Silva', 'joao.silva@aluno.email.com', '(11) 99999-9999', '1995-03-15'),
  ('Maria Souza', 'maria.souza@aluno.email.com', '(11) 88888-8888', '1998-12-31'),
  ('Pedro Santos', 'pedro.santos@aluno.email.com', '(11) 77777-7777', '2000-06-20');

INSERT INTO cursos (nome, duracao, valor) VALUES
  ('Formação WebDev Full Stack JavaScript', 120, 15000),
  ('Formação em Data Analytics', 90, 12000),
  ('Formação Análise de Sistemas', 150, 18000),
  ('Formação WebDev Full Stack Java', 100, 14000);

INSERT INTO modulos (id,nome, descricao, carga_horaria) VALUES (1, 'Introdução ao Desenvolvimento Web', 'Neste módulo, os alunos aprenderão os fundamentos do desenvolvimento web, incluindo HTML, CSS e JavaScript.',40),
(2, 'Banco de Dados e SQL', 'Neste módulo, os alunos aprenderão sobre bancos de dados e a linguagem SQL.',30),
(3, 'Desenvolvimento de Aplicações Web', 'Neste módulo, os alunos aprenderão a desenvolver aplicações web completas usando frameworks como React, Angular ou Vue.',50),
(4, 'Análise de Dados', 'Neste módulo, os alunos aprenderão técnicas de análise de dados, incluindo mineração de dados e visualização de dados.',30),
(5, 'Programação Orientada a Objetos', 'Neste módulo, os alunos aprenderão os conceitos fundamentais da programação orientada a objetos.',40),
(6, 'Desenvolvimento Mobile', 'Neste módulo, os alunos aprenderão a desenvolver aplicativos móveis para Android ou iOS.',30);
INSERT INTO alunos_cursos (aluno_id, curso_id) VALUES
  (1, 1),
  (1, 2),
  (2, 2),
  (3, 3),
  (3, 4);

INSERT INTO cursos_modulos (curso_id, modulo_id)
VALUES (1, 1),
(1, 2),
(1, 3),
(2, 2),
(2, 4),
(2, 5),
(3, 1),
(3, 5),
(3, 6),
(4, 1),
(4, 2),
(4, 3);

INSERT INTO turmas (nome, data_inicio, data_fim, curso_id) VALUES
  ('Turma de WebDev Full Stack JavaScript', '2023-01-10', '2023-06-20', 1),
  ('Turma de Data Analytics', '2023-02-15', '2023-08-01', 2),
  ('Turma de Análise de Sistemas', '2023-03-20', '2023-09-30', 3),
  ('Turma de WebDev Full Stack Java', '2023-04-25', '2023-11-10', 4);
  
--1 - Selecionar a quantidade total de estudantes cadastrados no banco.
SELECT COUNT(*) as total_estudantes FROM alunos;
-- 2 - Selecionar todos os estudantes com os respectivos cursos que eles estão cadastrados;
SELECT a.nome AS aluno, c.nome AS curso
FROM alunos a
INNER JOIN alunos_cursos ac ON a.id = ac.aluno_id
INNER JOIN cursos c ON ac.curso_id = c.id;

SELECT f.nome AS facilitador
FROM facilitadores f
INNER JOIN turmas_facilitadores tf ON f.id = tf.facilitador_id
GROUP BY f.id
HAVING COUNT(tf.turma_id) > 1;


-- Criação das tabelas
CREATE TABLE alunos (
  id SERIAL PRIMARY KEY,
  nome VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL UNIQUE,
  telefone VARCHAR(20),
  data_nascimento DATE
);

-- Comando para criar a tabela Cursos
CREATE TABLE cursos (
  id SERIAL PRIMARY KEY,
  nome VARCHAR(255) NOT NULL,
  duracao INTEGER NOT NULL,
  valor DECIMAL(10,2) NOT NULL
);

-- Comando para criar a tabela Módulos 
CREATE TABLE modulos (
  id SERIAL PRIMARY KEY,
  nome VARCHAR(255) NOT NULL,
  descricao VARCHAR(255) NOT NULL,
  carga_horaria INTEGER NOT NULL
);

-- Comando para criar a tabela departamentos
CREATE TABLE departamentos (
  id SERIAL PRIMARY KEY,
  nome VARCHAR(255) NOT NULL,
  descricao VARCHAR(255)
);

-- Comando para criar a tabela de relacionamento entre Alunos e Cursos
CREATE TABLE alunos_cursos (
  id SERIAL PRIMARY KEY,
  aluno_id INTEGER NOT NULL,
  curso_id INTEGER NOT NULL,
  FOREIGN KEY (aluno_id) REFERENCES alunos(id),
  FOREIGN KEY (curso_id) REFERENCES cursos(id)
);

-- Comando para criar a tabela Turmas
CREATE TABLE turmas (
  id SERIAL PRIMARY KEY,
  nome VARCHAR(255) NOT NULL,
  data_inicio DATE NOT NULL,
  data_fim DATE NOT NULL,
  curso_id INTEGER NOT NULL,
  FOREIGN KEY (curso_id) REFERENCES cursos(id)
);

-- Comando para criar a tabela Facilitadores
DROP TABLE facilitadores (
  id SERIAL PRIMARY KEY,
  nome VARCHAR(255) NOT NULL,
  cpf VARCHAR(14) NOT NULL UNIQUE,
  email VARCHAR(255) NOT NULL UNIQUE,
  telefone VARCHAR(20),
  id_departamento INTEGER NOT NULL,
  FOREIGN KEY (id_departamento) REFERENCES departamentos(id)
);

-- Comando para criar a tabela de relacionamento entre Turmas e Facilitadores
CREATE TABLE turmas_facilitadores (
  id SERIAL PRIMARY KEY,
  turma_id INTEGER NOT NULL,
  facilitador_id INTEGER NOT NULL,
  FOREIGN KEY (turma_id) REFERENCES turmas(id),
  FOREIGN KEY (facilitador_id) REFERENCES facilitadores(id)
);

-- Comando para criar a tabela Funcionários
CREATE TABLE funcionarios (
  id SERIAL PRIMARY KEY,
  nome VARCHAR(255) NOT NULL,
  cpf VARCHAR(14) NOT NULL UNIQUE,
  email VARCHAR(255) NOT NULL UNIQUE,
  telefone VARCHAR(20),
  departamento_id INTEGER NOT NULL,
  FOREIGN KEY (departamento_id) REFERENCES departamentos(id)
);

-- Comando para criar a tabela de relacionamento entre Cursos e Módulos
CREATE TABLE cursos_modulos (
  id SERIAL PRIMARY KEY,
  curso_id INTEGER NOT NULL,
  modulo_id INTEGER NOT NULL,
  FOREIGN KEY (curso_id) REFERENCES cursos(id),
  FOREIGN KEY (modulo_id) REFERENCES modulos(id)
);

-- Inserção de dados

INSERT INTO alunos (nome, email, telefone, data_nascimento) VALUES
  ('João da Silva', 'joao.silva@aluno.email.com', '(11) 99999-9999', '1995-03-15'),
  ('Maria Souza', 'maria.souza@aluno.email.com', '(11) 88888-8888', '1998-12-31'),
  ('Pedro Santos', 'pedro.santos@aluno.email.com', '(11) 77777-7777', '2000-06-20');

INSERT INTO cursos (nome, duracao, valor) VALUES
  ('Formação WebDev Full Stack JavaScript', 120, 15000),
  ('Formação em Data Analytics', 90, 12000),
  ('Formação Análise de Sistemas', 150, 18000),
  ('Formação WebDev Full Stack Java', 100, 14000);

INSERT INTO modulos (id,nome, descricao, carga_horaria) VALUES (1, 'Introdução ao Desenvolvimento Web', 'Neste módulo, os alunos aprenderão os fundamentos do desenvolvimento web, incluindo HTML, CSS e JavaScript.',40),
(2, 'Banco de Dados e SQL', 'Neste módulo, os alunos aprenderão sobre bancos de dados e a linguagem SQL.',30),
(3, 'Desenvolvimento de Aplicações Web', 'Neste módulo, os alunos aprenderão a desenvolver aplicações web completas usando frameworks como React, Angular ou Vue.',50),
(4, 'Análise de Dados', 'Neste módulo, os alunos aprenderão técnicas de análise de dados, incluindo mineração de dados e visualização de dados.',30),
(5, 'Programação Orientada a Objetos', 'Neste módulo, os alunos aprenderão os conceitos fundamentais da programação orientada a objetos.',40),
(6, 'Desenvolvimento Mobile', 'Neste módulo, os alunos aprenderão a desenvolver aplicativos móveis para Android ou iOS.',30);
INSERT INTO alunos_cursos (aluno_id, curso_id) VALUES
  (1, 1),
  (1, 2),
  (2, 2),
  (3, 3),
  (3, 4);

INSERT INTO cursos_modulos (curso_id, modulo_id)
VALUES (1, 1),
(1, 2),
(1, 3),
(2, 2),
(2, 4),
(2, 5),
(3, 1),
(3, 5),
(3, 6),
(4, 1),
(4, 2),
(4, 3);

INSERT INTO turmas (nome, data_inicio, data_fim, curso_id) VALUES
  ('Turma de WebDev Full Stack JavaScript', '2023-01-10', '2023-06-20', 1),
  ('Turma de Data Analytics', '2023-02-15', '2023-08-01', 2),
  ('Turma de Análise de Sistemas', '2023-03-20', '2023-09-30', 3),
  ('Turma de WebDev Full Stack Java', '2023-04-25', '2023-11-10', 4);
  
--1 - Selecionar a quantidade total de estudantes cadastrados no banco.
SELECT COUNT(*) as total_estudantes FROM alunos;
-- 2 - Selecionar todos os estudantes com os respectivos cursos que eles estão cadastrados;
SELECT a.nome AS aluno, c.nome AS curso
FROM alunos a
INNER JOIN alunos_cursos ac ON a.id = ac.aluno_id
INNER JOIN cursos c ON ac.curso_id = c.id;

SELECT f.nome AS facilitador
FROM facilitadores f
INNER JOIN turmas_facilitadores tf ON f.id = tf.facilitador_id
GROUP BY f.id
HAVING COUNT(tf.turma_id) > 1;

INSERT INTO facilitadores (nome, cpf, email, telefone, id_departamento) VALUES
  ('Carlos Oliveira', '654.321.987-10', 'carlos.oliveira@facilitador.resilia.com', '(11) 91234-5678', 3),
  ('Ana Santos', '987.654.321-20', 'ana.santos@facilitador.resilia.com', '(21) 98765-4321', 1),
  ('Rodrigo Costa', '321.654.987-30', 'rodrigo.costa@facilitador.resilia.com', '(31) 99876-5432', 3),
  ('Paulo Souza', '321.654.987-31', 'paulo.souza@facilitador.senac.com', '(31) 99876-5432', 1),
  ('Ricardo Melo', '321.654.987-32', 'ricardo.melo@facilitador.senac.com', '(31) 99876-5432', 2),
  ('Amanda Maia', '321.654.987-33', 'amanda.maia@facilitador.senac.com', '(31) 99876-5432', 1),
  ('Larissa Silva', '890.123.456-40', 'larissa.silva@facilitador.resilia.com', '(41) 91234-5678', 2);
  
  INSERT INTO departamentos (nome) VALUES
  ('RH'),
  ('Financeiro'),
  ('TI'),
  ('Comercial');


